version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: event-driven-postgres
    environment:
      POSTGRES_DB: event_driven_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - event-driven-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: event-driven-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - event-driven-network

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_driven_db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - event-driven-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_driven_db
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - event-driven-network
    restart: unless-stopped

  # Log Service
  log-service:
    build:
      context: ./log-service
      dockerfile: Dockerfile
    container_name: log-service
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_driven_db
    depends_on:
      - postgres
    networks:
      - event-driven-network
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - user-service
      - order-service
      - log-service
    networks:
      - event-driven-network
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  event-driven-network:
    driver: bridge
